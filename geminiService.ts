
import { GoogleGenAI } from "@google/genai";

const apiKey = process.env.API_KEY;
if (!apiKey) {
    throw new Error("API_KEY environment variable not set. Please check your configuration.");
}

const ai = new GoogleGenAI({ apiKey });

const cleanJson = (text: string): string => {
    const fenceRegex = /^```(\w*)?\s*\n?(.*?)\n?\s*```$/s;
    const match = text.match(fenceRegex);
    if (match && match[2]) {
        return match[2].trim();
    }
    return text.trim();
};

const BLOG_POST_PROMPT_TEMPLATE = (topic: string) => `
You are a content marketing expert for 'ANSONSPORTS', a premium sportswear manufacturer from Pakistan.
Your audience is team managers, club owners, and sports apparel retailers.
Based on the topic "${topic}", generate a full blog post.
The output must be a clean JSON object with "title" and "content" keys.
- "title": A catchy, SEO-friendly headline for the blog post.
- "content": The full blog post text, formatted with Markdown. It should have an introduction, at least three body paragraphs, and a conclusion. Use headings, bold text, and lists where appropriate to make it readable.

Do not include any other text, explanations, or markdown fences.
Just provide the raw JSON object.
`;

export const generateBlogPost = async (topic: string): Promise<{ title: string; content: string }> => {
    try {
        const response = await ai.models.generateContent({
            model: "gemini-2.5-flash",
            contents: BLOG_POST_PROMPT_TEMPLATE(topic),
            config: {
                responseMimeType: "application/json",
                temperature: 0.7,
            }
        });

        const jsonStr = cleanJson(response.text);
        
        try {
            const parsedData = JSON.parse(jsonStr);
            if (parsedData.title && parsedData.content) {
                return parsedData;
            } else {
                 throw new Error("Generated JSON is missing 'title' or 'content' keys.");
            }
        } catch (e) {
            console.error("Failed to parse JSON response from Gemini:", jsonStr, e);
            throw new Error("The AI returned an unexpected format. Please try again.");
        }

    } catch (error) {
        console.error("Error calling Gemini API for blog post:", error);
        throw new Error("Could not fetch blog post from the AI service.");
    }
};

export const generateImage = async (prompt: string): Promise<string> => {
    try {
        const fullPrompt = `A professional, dynamic photograph of ${prompt}, for a premium sportswear brand 'ANSONSPORTS'. Highly detailed, realistic lighting, suitable for marketing.`;

        const response = await ai.models.generateImages({
            model: 'imagen-3.0-generate-002',
            prompt: fullPrompt,
            config: { numberOfImages: 1, outputMimeType: 'image/jpeg' },
        });

        if (response.generatedImages && response.generatedImages.length > 0) {
            const base64ImageBytes: string = response.generatedImages[0].image.imageBytes;
            return `data:image/jpeg;base64,${base64ImageBytes}`;
        } else {
            throw new Error("No image was generated by the API.");
        }

    } catch (error) {
        console.error("Error calling Imagen API:", error);
        throw new Error("Could not generate image from the AI service.");
    }
};


const IDEA_PROMPT = `
You are a content marketing expert for 'ANSONSPORTS', a premium sportswear manufacturer from Pakistan.
Your audience consists of team managers, club owners, gym operators, and sports apparel retailers.
Generate a single, compelling blog post idea.

The output must be a clean JSON object with two keys: "title" and "summary".
- "title": A catchy, benefit-driven headline (6-12 words).
- "summary": A brief, engaging description of the post (2-3 sentences).

Do not include any other text, explanations, or markdown fences.
Just provide the raw JSON object.

Example format:
{
  "title": "5 Signs Your Team Uniforms Are Holding You Back",
  "summary": "Discover the hidden costs of low-quality kits, from player performance to team morale. Learn what to look for in pro-grade apparel to give your team the winning edge."
}
`;

export const generateBlogPostIdea = async (): Promise<{ title: string; summary: string }> => {
    try {
        const response = await ai.models.generateContent({
            model: "gemini-2.5-flash",
            contents: IDEA_PROMPT,
            config: {
                responseMimeType: "application/json",
                temperature: 0.9,
            }
        });

        const jsonStr = cleanJson(response.text);
        
        try {
            const parsedData = JSON.parse(jsonStr);
            if (parsedData.title && parsedData.summary) {
                return parsedData;
            } else {
                 throw new Error("Generated JSON is missing 'title' or 'summary' keys.");
            }
        } catch (e) {
            console.error("Failed to parse JSON response from Gemini:", jsonStr, e);
            throw new Error("The AI returned an unexpected format. Please try again.");
        }

    } catch (error) {
        console.error("Error calling Gemini API for idea:", error);
        throw new Error("Could not fetch blog post idea from the AI service.");
    }
};

const PRODUCT_DETAILS_PROMPT = `
You are an expert catalog manager for 'ANSONSPORTS', a sportswear manufacturer.
Analyze the provided image of a sports garment.
Based on the image, generate details for a product portfolio.

The output must be a clean JSON object with "title", "category", and "description" keys.
- "title": A concise, descriptive product name (e.g., "Men's Pro-Fit Soccer Jersey", "Women's Sublimated Volleyball Kit").
- "category": Choose the best fit from these options: 'Team Uniforms', 'Sublimation', 'Gym & Training', 'Martial Arts', 'Other'.
- "description": A short, appealing marketing description (2-3 sentences) highlighting key features visible in the image, such as fabric type, design elements, and intended sport.

Do not include any other text, explanations, or markdown fences.
Just provide the raw JSON object.
`;

export const generateProductDetailsFromImage = async (base64Image: string, mimeType: string): Promise<{ title: string; category: string; description: string }> => {
    try {
        const imagePart = {
            inlineData: {
                mimeType,
                data: base64Image,
            },
        };

        const response = await ai.models.generateContent({
            model: "gemini-2.5-flash",
            contents: { parts: [imagePart, { text: PRODUCT_DETAILS_PROMPT }] },
            config: {
                responseMimeType: "application/json",
            },
        });

        const jsonStr = cleanJson(response.text);
        
        try {
            const parsedData = JSON.parse(jsonStr);
            if (parsedData.title && parsedData.category && parsedData.description) {
                return parsedData;
            } else {
                 throw new Error("Generated JSON is missing required keys.");
            }
        } catch (e) {
            console.error("Failed to parse JSON response from Gemini:", jsonStr, e);
            throw new Error("The AI returned an unexpected format. Please try again.");
        }

    } catch (error) {
        console.error("Error calling Gemini API for product details:", error);
        throw new Error("Could not generate product details from the AI service.");
    }
};

const MOCKUP_IDEA_PROMPT_TEMPLATE = (idea: string) => `
Create a professional, photorealistic mockup of a sportswear item for a product catalog.
The user's idea is: "${idea}".
The final image should be a high-quality, appealing photograph of the apparel, presented clearly against a simple background.
Focus on realism, detailed texture, and professional lighting.
`;

export const generateMockupFromIdea = async (idea: string): Promise<string> => {
    try {
        const response = await ai.models.generateImages({
            model: 'imagen-3.0-generate-002',
            prompt: MOCKUP_IDEA_PROMPT_TEMPLATE(idea),
            config: { numberOfImages: 1, outputMimeType: 'image/jpeg', aspectRatio: '1:1' },
        });

        if (response.generatedImages && response.generatedImages.length > 0) {
            const base64ImageBytes: string = response.generatedImages[0].image.imageBytes;
            return `data:image/jpeg;base64,${base64ImageBytes}`;
        } else {
            throw new Error("No mockup image was generated by the API.");
        }

    } catch (error) {
        console.error("Error calling Imagen API for mockup from idea:", error);
        throw new Error("Could not generate mockup from the AI service.");
    }
};

const MOCKUP_GENERATION_PROMPT_FROM_UPLOAD = (instructions: string) => `
You are a prompt engineer for an image generation AI. Your audience is a text-to-image model (like Imagen 3).
The user has uploaded an image (e.g., a logo, a design) and provided text instructions on how to use it.
Your task is to analyze the image and the user's instructions to generate a single, highly-detailed, and effective prompt to create a photorealistic apparel mockup.

The user's instructions are: "${instructions}".

Your generated prompt must:
1.  Clearly describe the final apparel item requested by the user (e.g., "a royal blue polo shirt," "a black sleeveless hoodie").
2.  Accurately describe the key visual elements of the uploaded design that needs to be placed on the apparel (e.g., "a circular emblem of a roaring golden lion's head," "the text 'BEAST MODE' in a bold, distressed font").
3.  Combine these into a single, cohesive descriptive paragraph.
4.  Emphasize a professional, photorealistic, product-catalog style for the final image.

The final output MUST BE ONLY the prompt text. Do not include any other explanatory text, labels, or markdown.

Example: If the user uploads a logo of a red eagle and gives instructions "Put this on a white baseball cap", your output should be a single string like:
"Photorealistic product photography of a clean white baseball cap. A detailed embroidered logo of a fierce red eagle, with its wings spread, is on the front of the cap. The lighting is bright and professional, showcasing the texture of the cap and the logo."
`;


export const generateMockupFromUpload = async (base64Image: string, mimeType: string, instructions: string): Promise<string> => {
    try {
        // Step 1: Use Gemini to analyze the user's image and instructions to generate a single, powerful prompt for Imagen.
        const imagePart = { inlineData: { mimeType, data: base64Image } };
        const textPart = { text: MOCKUP_GENERATION_PROMPT_FROM_UPLOAD(instructions) };

        const promptGenerationResponse = await ai.models.generateContent({
            model: "gemini-2.5-flash",
            contents: { parts: [imagePart, textPart] },
        });
        
        const finalPromptForImagen = promptGenerationResponse.text;
        
        if (!finalPromptForImagen) {
            throw new Error("AI could not generate a coherent prompt from the uploaded image and instructions.");
        }

        // Step 2: Use the AI-generated prompt to create the final mockup image with Imagen.
        const imageResponse = await ai.models.generateImages({
            model: 'imagen-3.0-generate-002',
            prompt: finalPromptForImagen,
            config: { numberOfImages: 1, outputMimeType: 'image/jpeg', aspectRatio: '1:1' },
        });

        if (imageResponse.generatedImages && imageResponse.generatedImages.length > 0) {
            const base64ImageBytes: string = imageResponse.generatedImages[0].image.imageBytes;
            return `data:image/jpeg;base64,${base64ImageBytes}`;
        } else {
            throw new Error("No mockup image was generated by the API. The generated prompt might have been too complex or filtered.");
        }

    } catch (error) {
        console.error("Error calling AI services for mockup from upload:", error);
        const errorMessage = error instanceof Error ? error.message : "An unknown error occurred.";
        throw new Error(`Could not generate mockup from the AI service. Reason: ${errorMessage}`);
    }
};